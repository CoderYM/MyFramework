<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	"

	default-lazy-init="true">

	<description>Spring All Config </description>

	<!-- 初始化加载配置文件 -->
	<bean
		class="com.allinpay.its.boss.framework.utils.CustomizedPropertyConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.allinpay.its.boss" >
		<context:exclude-filter type="regex"  expression=".system.*.action.*" />
	</context:component-scan>

	<!-- 数据源配置, 使用DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testOnBorrow" value="true" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="persistenceJpaVendorAdapter" />
		<property name="packagesToScan" value="com.allinpay.its.boss" />

	</bean>

	<!-- 这里采用Spring中对Hibernate处理各种数据库的JPA支持 -->
	<bean id="persistenceJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<!-- 这里通过自定义的持久层获取方法根据连接url获取当前数据库的方言 -->
			<bean factory-method="getDialect"
				class="com.allinpay.its.boss.framework.persistence.PersistenceUtil">
				<constructor-arg ref="dataSource" />
			</bean>
		</property>
	</bean>
	
	<!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
	<jpa:repositories base-package="com.allinpay.its.boss"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- MyBatis配置 -->
	
	<bean id="paginationInterceptor" class="com.allinpay.its.boss.framework.repository.mybatis.pagination.interceptor.PaginationInterceptor"></bean>
	
	<!-- SqlSessionFactory配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 这里可以省略,采用spring配置方式 <property name="configLocation" value="classpath:mybatis/conf/mybatis-config.xml" 
			/> -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.allinpay.its.boss" />

		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:mybatis/**/*Mapper.xml" />

		<!-- 这里进行配置mybatis拦截器插件,在这里我已经通过注解方式封装了,因为个人感觉拦截器的模式不够灵活,还影响性能 -->
		<property name="plugins">
			<array>
				<ref bean="paginationInterceptor" />
			</array>
		</property>
		<property name="configurationProperties">
			<props>
				<prop key="dialect">oracle</prop>
			</props>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.allinpay.its.boss" />
		<property name="annotationClass"
			value="com.allinpay.its.boss.framework.repository.mybatis.MyBatisRepository" />
	</bean>

	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
</beans>